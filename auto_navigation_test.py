#!/usr/bin/env python3
"""
Script de Prueba de Navegaci√≥n Autom√°tica - RPA TAMAPRINT
Con delays autom√°ticos para preparaci√≥n de pantallas
"""

import time
import sys
from rpa.navigation_planner import navigation_planner
from rpa.screen_detector import ScreenState, screen_detector
from rpa.simple_logger import rpa_logger


def main():
    """Funci√≥n principal con navegaci√≥n autom√°tica"""
    
    print("üöÄ SISTEMA DE NAVEGACI√ìN AUTOM√ÅTICA - RPA TAMAPRINT")
    print("=" * 60)
    print()
    print("üìã Este script navegar√° autom√°ticamente entre pantallas")
    print("‚è∞ Incluye delays autom√°ticos para preparaci√≥n")
    print()
    
    # Delay inicial para preparaci√≥n
    print("‚è≥ Iniciando en 5 segundos...")
    print("üí° Prep√°rate para que el sistema detecte autom√°ticamente tu pantalla")
    for i in range(5, 0, -1):
        print(f"   {i}...")
        time.sleep(1)
    
    print("\nüîç Iniciando detecci√≥n autom√°tica...")
    
    try:
        # 1. Detectar estado actual
        print("\n1Ô∏è‚É£ DETECTANDO ESTADO ACTUAL")
        print("-" * 40)
        
        detection_result = screen_detector.detect_current_screen(save_screenshot=True)
        print(f"‚úÖ Estado detectado: {detection_result.state.value}")
        print(f"üìä Confianza: {detection_result.confidence:.3f}")
        
        if detection_result.state == ScreenState.ERROR:
            print("‚ùå Error en detecci√≥n, abortando...")
            return False
        
        # 2. Navegar a Remote Desktop si no estamos ah√≠
        if detection_result.state != ScreenState.REMOTE_DESKTOP:
            print(f"\n2Ô∏è‚É£ NAVEGANDO A REMOTE DESKTOP")
            print("-" * 40)
            print("‚è≥ Esperando 3 segundos antes de navegar...")
            time.sleep(3)
            
            if navigation_planner.navigate_to_target_state(ScreenState.REMOTE_DESKTOP):
                print("‚úÖ Llegamos a Remote Desktop")
            else:
                print("‚ùå No se pudo llegar a Remote Desktop")
                return False
        else:
            print("‚úÖ Ya estamos en Remote Desktop")
        
        # 3. Navegar a SAP Desktop
        print(f"\n3Ô∏è‚É£ NAVEGANDO A SAP DESKTOP")
        print("-" * 40)
        print("‚è≥ Esperando 3 segundos antes de navegar...")
        time.sleep(3)
        
        if navigation_planner.navigate_to_target_state(ScreenState.SAP_DESKTOP):
            print("‚úÖ Llegamos a SAP Desktop")
        else:
            print("‚ùå No se pudo llegar a SAP Desktop")
            return False
        
        # 4. Navegar a Formulario de √ìrdenes
        print(f"\n4Ô∏è‚É£ NAVEGANDO A FORMULARIO DE √ìRDENES")
        print("-" * 40)
        print("‚è≥ Esperando 3 segundos antes de navegar...")
        time.sleep(3)
        
        if navigation_planner.navigate_to_target_state(ScreenState.SALES_ORDER_FORM):
            print("‚úÖ Llegamos al Formulario de √ìrdenes")
        else:
            print("‚ùå No se pudo llegar al Formulario de √ìrdenes")
            return False
        
        # 5. Verificaci√≥n final
        print(f"\n5Ô∏è‚É£ VERIFICACI√ìN FINAL")
        print("-" * 40)
        
        final_detection = screen_detector.detect_current_screen(save_screenshot=True)
        print(f"Estado final: {final_detection.state.value}")
        print(f"Confianza final: {final_detection.confidence:.3f}")
        
        if final_detection.state == ScreenState.SALES_ORDER_FORM:
            print("üéâ ¬°NAVEGACI√ìN COMPLETADA EXITOSAMENTE!")
            print("‚úÖ El sistema est√° listo para procesar √≥rdenes")
            return True
        else:
            print("‚ö†Ô∏è Navegaci√≥n completada pero estado final no confirmado")
            return False
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Navegaci√≥n interrumpida por el usuario")
        return False
    except Exception as e:
        print(f"\n‚ùå Error durante la navegaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_specific_navigation():
    """Prueba navegaci√≥n a un estado espec√≠fico"""
    
    print("üéØ PRUEBA DE NAVEGACI√ìN ESPEC√çFICA")
    print("=" * 60)
    print()
    print("Opciones:")
    print("1. Remote Desktop")
    print("2. SAP Desktop") 
    print("3. Formulario de √ìrdenes")
    print()
    
    try:
        choice = input("Selecciona destino (1-3): ").strip()
        
        target_state = None
        if choice == "1":
            target_state = ScreenState.REMOTE_DESKTOP
        elif choice == "2":
            target_state = ScreenState.SAP_DESKTOP
        elif choice == "3":
            target_state = ScreenState.SALES_ORDER_FORM
        else:
            print("‚ùå Opci√≥n inv√°lida")
            return False
        
        print(f"\nüéØ Navegando a: {target_state.value}")
        print("‚è≥ Esperando 5 segundos para preparaci√≥n...")
        time.sleep(5)
        
        success = navigation_planner.navigate_to_target_state(target_state)
        
        if success:
            print(f"‚úÖ Navegaci√≥n exitosa a {target_state.value}")
        else:
            print(f"‚ùå Fallo en navegaci√≥n a {target_state.value}")
        
        return success
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Prueba interrumpida")
        return False


if __name__ == "__main__":
    print("üéØ SISTEMA DE NAVEGACI√ìN AUTOM√ÅTICA")
    print("Versi√≥n: Fase 2 - Navegaci√≥n inteligente")
    print()
    
    # Preguntar tipo de prueba
    print("Tipos de prueba:")
    print("1. Navegaci√≥n completa (Remote Desktop ‚Üí SAP ‚Üí √ìrdenes)")
    print("2. Navegaci√≥n espec√≠fica")
    print()
    
    try:
        test_type = input("Selecciona tipo de prueba (1-2): ").strip()
        
        if test_type == "1":
            success = main()
        elif test_type == "2":
            success = test_specific_navigation()
        else:
            print("‚ùå Opci√≥n inv√°lida")
            success = False
        
        if success:
            print("\nüéâ ¬°PRUEBA EXITOSA!")
        else:
            print("\n‚ùå PRUEBA FALLIDA")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Prueba interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
    
    print("\nüëã ¬°Hasta luego!")
