#!/usr/bin/env python3
"""
Script de prueba para verificar las correcciones de importaci√≥n
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_vision_import():
    """Prueba la importaci√≥n de Vision"""
    print("=== PRUEBA DE IMPORTACI√ìN DE VISION ===")
    
    try:
        from rpa.vision.main import Vision
        print("‚úÖ Importaci√≥n de Vision exitosa")
        
        # Crear instancia
        vision = Vision()
        print("‚úÖ Instancia de Vision creada exitosamente")
        
        # Probar m√©todos b√°sicos
        print("üîç Probando m√©todos de detecci√≥n...")
        
        # Probar detecci√≥n de SAP desktop
        try:
            sap_desktop = vision.is_sap_desktop_visible()
            print(f"‚úÖ Detecci√≥n de SAP desktop: {'Detectado' if sap_desktop else 'No detectado'}")
        except Exception as e:
            print(f"‚ùå Error en detecci√≥n de SAP desktop: {str(e)}")
        
        # Probar detecci√≥n de formulario de √≥rdenes
        try:
            sales_form = vision.is_sales_order_form_visible()
            print(f"‚úÖ Detecci√≥n de formulario de √≥rdenes: {'Detectado' if sales_form else 'No detectado'}")
        except Exception as e:
            print(f"‚ùå Error en detecci√≥n de formulario de √≥rdenes: {str(e)}")
        
        # Probar detecci√≥n robusta de SAP
        try:
            sap_coords = vision.get_sap_coordinates_robust()
            print(f"‚úÖ Detecci√≥n robusta de SAP: {'Encontrado' if sap_coords else 'No encontrado'}")
            if sap_coords:
                print(f"   Coordenadas: {sap_coords}")
        except Exception as e:
            print(f"‚ùå Error en detecci√≥n robusta de SAP: {str(e)}")
        
        print("\nüéâ ¬°TODAS LAS PRUEBAS DE IMPORTACI√ìN EXITOSAS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaci√≥n: {str(e)}")
        return False

def test_state_handlers_import():
    """Prueba la importaci√≥n de los manejadores de estado"""
    print("\n=== PRUEBA DE IMPORTACI√ìN DE MANEJADORES DE ESTADO ===")
    
    try:
        from rpa.rpa_state_handlers import RPAStateHandlers
        print("‚úÖ Importaci√≥n de RPAStateHandlers exitosa")
        
        # Crear instancia mock del RPA
        class MockRPA:
            def get_remote_desktop(self):
                return True
            def open_sap(self):
                return True
            def open_sap_orden_de_ventas(self):
                return True
        
        # Crear instancia de manejadores
        handlers = RPAStateHandlers(MockRPA())
        print("‚úÖ Instancia de RPAStateHandlers creada exitosamente")
        
        print("\nüéâ ¬°PRUEBAS DE MANEJADORES DE ESTADO EXITOSAS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaci√≥n de manejadores: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîß SISTEMA DE PRUEBAS DE CORRECCI√ìN")
    print("Versi√≥n: Verificaci√≥n de importaciones")
    print()
    
    # Probar importaci√≥n de Vision
    vision_success = test_vision_import()
    
    # Probar importaci√≥n de manejadores de estado
    handlers_success = test_state_handlers_import()
    
    if vision_success and handlers_success:
        print("\nüéâ ¬°TODAS LAS CORRECCIONES EXITOSAS!")
        print("‚úÖ El RPA deber√≠a funcionar correctamente ahora")
    else:
        print("\n‚ùå ALGUNAS CORRECCIONES FALLARON")
        print("‚ö†Ô∏è Revisar los errores antes de ejecutar el RPA")
    
    print("\nüëã ¬°Hasta luego!")
