#!/usr/bin/env python3
"""
Script de prueba para el m√≥dulo de √≥rdenes de producci√≥n
"""

import os
import sys
import json
import time
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.config_manager import ConfigManager
from rpa.modules.production_order import ProductionOrderHandler
from rpa.simple_logger import rpa_logger


def crear_datos_produccion_prueba():
    """Crear datos de prueba para √≥rdenes de producci√≥n"""
    datos_prueba = {
        "numero_articulo": "101846",
        "numero_pedido_interno": "6107",
        "cantidad": 2000,
        "fecha_finalizacion": "12/09/2025",
        "unidad_medida": "PCS",
        "centro_trabajo": "CT-01",
        "observaciones": "Orden de producci√≥n de prueba para el RPA"
    }
    return datos_prueba


def mostrar_datos_prueba(datos):
    """Mostrar los datos de prueba de forma clara"""
    print("\nüìã DATOS DE PRUEBA - √ìRDENES DE PRODUCCI√ìN")
    print("=" * 50)
    print(f"üè∑Ô∏è  Art√≠culo: {datos['numero_articulo']}")
    print(f"üìù Pedido Interno: {datos['numero_pedido_interno']}")
    print(f"üìä Cantidad: {datos['cantidad']} {datos['unidad_medida']}")
    print(f"üìÖ Fecha Finalizaci√≥n: {datos['fecha_finalizacion']}")
    print(f"üè≠ Centro Trabajo: {datos['centro_trabajo']}")
    print(f"üí¨ Observaciones: {datos['observaciones']}")
    print("=" * 50)


def cambiar_a_escritorio_remoto():
    """Funci√≥n para cambiar al escritorio remoto usando Alt+Tab"""
    print("üîÑ Cambiando al escritorio remoto...")
    
    try:
        import pyautogui
        
        # M√©todo simple: usar Alt+Tab para cambiar a la ventana anterior
        print("   - Usando Alt+Tab para cambiar ventana...")
        pyautogui.hotkey('alt', 'tab')
        time.sleep(2.0)  # Esperar a que se active la ventana
        
        print("‚úÖ Cambio de ventana completado")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Error cambiando ventana: {e}")
        print("üí° El script continuar√°, pero aseg√∫rate de que el escritorio remoto est√© activo")
        time.sleep(3.0)
        return False


def verificar_formulario_produccion(vision):
    """Verificar que el formulario de producci√≥n est√© abierto"""
    print("üîç Verificando que el formulario de producci√≥n est√© abierto...")
    
    try:
        import pyautogui
        import cv2
        import numpy as np
        
        # Tomar screenshot y buscar elementos del formulario
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        # Buscar imagen del formulario de producci√≥n
        form_ref = cv2.imread('./rpa/vision/reference_images/production/sap_produccion_form.png', cv2.IMREAD_COLOR)
        
        if form_ref is not None:
            result = cv2.matchTemplate(screenshot_cv, form_ref, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            if max_val > 0.7:  # Umbral de confianza
                print(f"‚úÖ Formulario de producci√≥n detectado (confianza: {max_val:.3f})")
                return True
            else:
                print(f"‚ö†Ô∏è  Formulario no detectado claramente (confianza: {max_val:.3f})")
                return False
        else:
            print("‚ö†Ô∏è  Imagen de referencia del formulario no encontrada")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error verificando formulario: {e}")
        return False


def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ INICIANDO PRUEBA DEL M√ìDULO DE √ìRDENES DE PRODUCCI√ìN")
    print("=" * 60)
    
    # Crear datos de prueba
    datos_prueba = crear_datos_produccion_prueba()
    mostrar_datos_prueba(datos_prueba)
    
    # Inicializar componentes
    print("\nüîß Inicializando componentes...")
    vision = Vision()
    config = ConfigManager()
    handler = ProductionOrderHandler(vision, config)
    
    print("‚úÖ Componentes inicializados")
    
    # Preguntar si cambiar al escritorio remoto
    print("\nüñ•Ô∏è  PREPARACI√ìN:")
    print("1. Aseg√∫rate de que el escritorio remoto est√© abierto")
    print("2. SAP Business One debe estar disponible")
    print("3. El m√≥dulo de producci√≥n debe estar accesible")
    
    respuesta = input("\n¬øDeseas cambiar autom√°ticamente al escritorio remoto? (s/n): ").strip().lower()
    
    if respuesta == 's':
        if not cambiar_a_escritorio_remoto():
            print("‚ö†Ô∏è  Continuando sin cambio autom√°tico de ventana")
    
    # Preguntar confirmaci√≥n para continuar
    print("\n‚è≥ PREPARACI√ìN FINAL:")
    print("‚Ä¢ El sistema cambiar√° a SAP Business One")
    print("‚Ä¢ Navegar√° al m√≥dulo de producci√≥n")
    print("‚Ä¢ Crear√° una orden de fabricaci√≥n")
    print("‚Ä¢ Procesar√° los datos de prueba")
    print("‚Ä¢ Tomar√° screenshots de confirmaci√≥n")
    
    confirmacion = input("\n¬øEst√°s listo para continuar? (s/n): ").strip().lower()
    
    if confirmacion != 's':
        print("‚ùå Prueba cancelada por el usuario")
        return
    
    # Ejecutar prueba
    print("\nüöÄ EJECUTANDO PRUEBA...")
    print("-" * 40)
    
    try:
        # Procesar orden de producci√≥n
        success = handler.process_production_order(datos_prueba)
        
        if success:
            print("\n‚úÖ PRUEBA EXITOSA")
            print("=" * 40)
            print("‚Ä¢ Orden de producci√≥n procesada correctamente")
            print("‚Ä¢ Datos cargados en SAP Business One")
            print("‚Ä¢ Formulario de producci√≥n completado")
            print("‚Ä¢ Screenshots generados")
            print("‚Ä¢ Logs actualizados")
            
            # Verificar formulario final
            print("\nüîç Verificando resultado final...")
            if verificar_formulario_produccion(vision):
                print("‚úÖ Formulario de producci√≥n confirmado")
            else:
                print("‚ö†Ô∏è  No se pudo confirmar el formulario final")
            
        else:
            print("\n‚ùå PRUEBA FALLIDA")
            print("=" * 40)
            print("‚Ä¢ Error en el procesamiento")
            print("‚Ä¢ Revisa los logs para m√°s detalles")
            print("‚Ä¢ Verifica la conexi√≥n con SAP")
            print("‚Ä¢ Aseg√∫rate de que el m√≥dulo de producci√≥n est√© disponible")
            
    except Exception as e:
        print(f"\nüí• ERROR CR√çTICO: {str(e)}")
        print("=" * 40)
        print("‚Ä¢ Error inesperado durante la prueba")
        print("‚Ä¢ Revisa la configuraci√≥n del sistema")
        print("‚Ä¢ Verifica las dependencias")
        print("‚Ä¢ Comprueba que las im√°genes de referencia existan")
    
    print("\nüèÅ PRUEBA COMPLETADA")
    print("=" * 60)
    print("üìÅ Revisa la carpeta 'screenshots' para ver las capturas")
    print("üìù Revisa los logs para informaci√≥n detallada")
    print("üîÑ Puedes ejecutar la prueba nuevamente si es necesario")
    print("üí° Si la prueba fall√≥, verifica:")
    print("   - Conexi√≥n al escritorio remoto")
    print("   - Acceso al m√≥dulo de producci√≥n en SAP")
    print("   - Im√°genes de referencia en la carpeta correspondiente")


if __name__ == "__main__":
    main()
