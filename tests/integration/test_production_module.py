#!/usr/bin/env python3
"""
Script de prueba para el m√≥dulo de √≥rdenes de producci√≥n
Fase 4: Integraci√≥n y Testing
"""

import os
import sys
import time
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.config_manager import ConfigManager
from rpa.modules.production_order import ProductionOrderHandler
from rpa.simple_logger import rpa_logger


def load_test_data() -> dict:
    """Cargar datos de prueba para √≥rdenes de producci√≥n"""
    test_data = {
        "tipo_modulo": "production_order",
        "datos": {
            "numero_articulo": "ART-001",
            "numero_pedido_interno": "PI-2024-001",
            "cantidad": 100,
            "fecha_finalizacion": "15/12/2024",
            "unidad_medida": "PCS",
            "centro_trabajo": "CT-01",
            "observaciones": "Orden de producci√≥n de prueba"
        },
        "metadata": {
            "fecha_creacion": "2024-12-01T10:30:00",
            "usuario": "SISTEMA_RPA",
            "version": "1.0",
            "prioridad": "alta"
        }
    }
    return test_data


def test_production_module():
    """Funci√≥n principal de prueba del m√≥dulo de producci√≥n"""
    print("üß™ PRUEBA DEL M√ìDULO DE √ìRDENES DE PRODUCCI√ìN")
    print("=" * 60)
    
    try:
        # 1. Inicializar componentes
        print("üîÑ Inicializando componentes...")
        config = ConfigManager()
        vision = Vision()
        
        # 2. Crear handler de producci√≥n
        print("üîÑ Creando handler de producci√≥n...")
        production_handler = ProductionOrderHandler(vision, config)
        
        # 3. Cargar datos de prueba
        print("üîÑ Cargando datos de prueba...")
        test_data = load_test_data()
        
        print(f"üìã Datos de prueba cargados:")
        print(f"   - Art√≠culo: {test_data['datos']['numero_articulo']}")
        print(f"   - Pedido interno: {test_data['datos']['numero_pedido_interno']}")
        print(f"   - Cantidad: {test_data['datos']['cantidad']}")
        print(f"   - Fecha: {test_data['datos']['fecha_finalizacion']}")
        
        # 4. Pausa para preparaci√≥n manual
        print("\n‚è∏Ô∏è  PREPARACI√ìN MANUAL REQUERIDA")
        print("=" * 40)
        print("1. Abre SAP Business One")
        print("2. Aseg√∫rate de estar en la pantalla principal")
        print("3. Ten el escritorio remoto activo")
        print("4. El script navegar√° autom√°ticamente")
        
        input("\n‚è∏Ô∏è  Presiona ENTER cuando est√©s listo para comenzar...")
        
        # 5. Ejecutar navegaci√≥n a producci√≥n
        print("\nüîÑ Navegando al m√≥dulo de producci√≥n...")
        navigation_success = production_handler.navigate_to_production()
        
        if not navigation_success:
            print("‚ùå Error en la navegaci√≥n. Verifica que SAP est√© abierto.")
            return False
        
        print("‚úÖ Navegaci√≥n completada exitosamente")
        
        # 6. Pausa para verificar formulario
        print("\n‚è∏Ô∏è  VERIFICACI√ìN DEL FORMULARIO")
        print("=" * 40)
        print("Verifica que el formulario de orden de producci√≥n est√© abierto")
        print("El script proceder√° a llenar los campos autom√°ticamente")
        
        input("\n‚è∏Ô∏è  Presiona ENTER para continuar con el llenado de campos...")
        
        # 7. Procesar orden de producci√≥n (sin auto-click en crear)
        print("\nüîÑ Procesando orden de producci√≥n...")
        success = production_handler.process_production_order(
            test_data['datos'], 
            auto_click_crear=False  # No hacer clic autom√°tico en crear
        )
        
        if success:
            print("\nüéâ PRUEBA COMPLETADA EXITOSAMENTE")
            print("=" * 40)
            print("‚úÖ El formulario ha sido llenado completamente")
            print("‚úÖ Todos los campos est√°n listos")
            print("‚úÖ Puedes revisar los datos y tomar la decisi√≥n final")
            print("\nüí° ACCIONES DISPONIBLES:")
            print("   - Haz clic en 'Crear' para confirmar la orden")
            print("   - Haz clic en 'Borrar' para cancelar")
            print("   - Modifica cualquier campo si es necesario")
            
            # 8. Pausa final para decisi√≥n manual
            print("\n‚è∏Ô∏è  ESPERANDO DECISI√ìN MANUAL")
            print("=" * 40)
            print("El script ha terminado. Toma tu decisi√≥n en SAP.")
            print("Presiona ENTER cuando hayas completado la acci√≥n manual...")
            
            input()
            print("‚úÖ Prueba finalizada correctamente")
            
        else:
            print("‚ùå Error procesando la orden de producci√≥n")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        rpa_logger.error(f"Error en test_production_module: {e}")
        return False


def test_individual_methods():
    """Prueba m√©todos individuales del handler"""
    print("\nüîß PRUEBA DE M√âTODOS INDIVIDUALES")
    print("=" * 40)
    
    try:
        config = ConfigManager()
        vision = Vision()
        production_handler = ProductionOrderHandler(vision, config)
        
        # Datos de prueba
        test_data = {
            "numero_articulo": "ART-TEST",
            "numero_pedido_interno": "PI-TEST-001",
            "cantidad": 50,
            "fecha_finalizacion": "20/12/2024"
        }
        
        print("üß™ Probando validaci√≥n de datos...")
        validation_result = production_handler.validate_form_data(test_data)
        print(f"   Resultado: {'‚úÖ V√°lido' if validation_result else '‚ùå Inv√°lido'}")
        
        print("üß™ Configuraci√≥n cargada:")
        print(f"   - Tabs art√≠culo: {production_handler.production_config.get('form_fields', {}).get('articulo_tabs', 'N/A')}")
        print(f"   - Tabs pedido interno: {production_handler.production_config.get('form_fields', {}).get('pedido_interno_tabs', 'N/A')}")
        print(f"   - Tabs cantidad: {production_handler.production_config.get('form_fields', {}).get('cantidad_tabs', 'N/A')}")
        print(f"   - Tabs fecha: {production_handler.production_config.get('form_fields', {}).get('fecha_finalizacion_tabs', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de m√©todos individuales: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO FASE 4: INTEGRACI√ìN Y TESTING")
    print("=" * 60)
    
    # Prueba de m√©todos individuales
    if not test_individual_methods():
        print("‚ùå Fall√≥ la prueba de m√©todos individuales")
        return
    
    # Prueba completa del m√≥dulo
    if not test_production_module():
        print("‚ùå Fall√≥ la prueba completa del m√≥dulo")
        return
    
    print("\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
    print("=" * 60)
    print("‚úÖ El m√≥dulo de producci√≥n est√° listo para uso")
    print("‚úÖ La integraci√≥n con el sistema principal es correcta")
    print("‚úÖ Los m√©todos funcionan como se esperaba")


if __name__ == "__main__":
    main()
