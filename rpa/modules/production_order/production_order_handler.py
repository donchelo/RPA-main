"""
Handler espec√≠fico para el m√≥dulo de √≥rdenes de producci√≥n
"""

import os
import time
import yaml
from typing import Dict, Any, Optional, List
import pyautogui
from ...vision.main import Vision
from ...config_manager import ConfigManager
from ...simple_logger import rpa_logger
from ...state_machine import RPAEvent, RPAState


class ProductionOrderHandler:
    """Manejador espec√≠fico para √≥rdenes de producci√≥n"""
    
    def __init__(self, vision_system: Vision, config: ConfigManager):
        self.vision = vision_system
        self.config = config
        self.production_config = self._load_production_config()
        
    def _load_production_config(self) -> Dict[str, Any]:
        """Cargar configuraci√≥n espec√≠fica del m√≥dulo de producci√≥n"""
        config_path = os.path.join(
            os.path.dirname(__file__), 
            'production_order_config.yaml'
        )
        
        try:
            with open(config_path, 'r', encoding='utf-8') as file:
                config_data = yaml.safe_load(file)
                return config_data.get('production_order', {})
        except Exception as e:
            rpa_logger.error(f"Error cargando configuraci√≥n de producci√≥n: {e}")
            return {}
    
    def navigate_to_production(self) -> bool:
        """Navega al m√≥dulo de producci√≥n y abre orden de fabricaci√≥n"""
        try:
            rpa_logger.info("üîÑ Navegando al m√≥dulo de producci√≥n...")
            
            # 1. Presionar Alt+M para abrir m√≥dulos
            pyautogui.hotkey('alt', 'm')
            time.sleep(self.production_config.get('navigation', {}).get('alt_m_delay', 0.5))
            
            # 2. Presionar P para ir a producci√≥n
            pyautogui.press('p')
            time.sleep(self.production_config.get('navigation', {}).get('p_key_delay', 1.0))
            
            # 3. Buscar y hacer clic en "Orden de Fabricaci√≥n"
            try:
                import cv2
                import numpy as np
                
                # Tomar screenshot y buscar la imagen del bot√≥n
                screenshot = pyautogui.screenshot()
                screenshot_np = np.array(screenshot)
                screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
                
                # Cargar imagen de referencia del bot√≥n
                button_ref = cv2.imread('./rpa/vision/reference_images/production/sap_orden_fabricacion_button.png', cv2.IMREAD_COLOR)
                
                if button_ref is not None:
                    # Buscar coincidencia
                    result = cv2.matchTemplate(screenshot_cv, button_ref, cv2.TM_CCOEFF_NORMED)
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    
                    confidence_threshold = self.production_config.get('template_matching', {}).get('orden_fabricacion_button_confidence', 0.8)
                    
                    if max_val > confidence_threshold:
                        # Calcular centro del elemento encontrado
                        w = button_ref.shape[1]
                        h = button_ref.shape[0]
                        center_x = max_loc[0] + w // 2
                        center_y = max_loc[1] + h // 2
                        
                        # Hacer clic en el centro
                        pyautogui.click(center_x, center_y)
                        orden_fabricacion_found = True
                        rpa_logger.info(f"‚úÖ Bot√≥n de orden de fabricaci√≥n encontrado (confianza: {max_val:.3f})")
                    else:
                        orden_fabricacion_found = False
                        rpa_logger.error(f"‚ùå Bot√≥n de orden de fabricaci√≥n no encontrado (confianza: {max_val:.3f})")
                else:
                    orden_fabricacion_found = False
                    rpa_logger.error("‚ùå Imagen de referencia del bot√≥n no encontrada")
                    
            except Exception as e:
                orden_fabricacion_found = False
                rpa_logger.error(f"‚ùå Error buscando bot√≥n de orden de fabricaci√≥n: {e}")
            
            if not orden_fabricacion_found:
                rpa_logger.error("‚ùå No se pudo encontrar el bot√≥n de orden de fabricaci√≥n")
                return False
                
            time.sleep(self.production_config.get('navigation', {}).get('mouse_click_delay', 2.0))
            rpa_logger.info("‚úÖ Navegaci√≥n a producci√≥n completada")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error navegando a producci√≥n: {e}")
            return False
    
    def process_production_order(self, data: Dict[str, Any]) -> bool:
        """Procesa una orden de producci√≥n completa"""
        try:
            rpa_logger.info("üöÄ Iniciando procesamiento de orden de producci√≥n")
            
            # Validar datos requeridos
            if not self._validate_production_data(data):
                return False
            
            # Navegar al m√≥dulo de producci√≥n
            if not self.navigate_to_production():
                return False
            
            # Buscar bot√≥n "Crear" y hacer clic
            if not self._click_create_button():
                return False
            
            # Cargar art√≠culo
            numero_articulo = data.get('numero_articulo')
            if not numero_articulo:
                rpa_logger.error("‚ùå N√∫mero de art√≠culo no encontrado")
                return False
            
            if not self._load_articulo(numero_articulo):
                return False
            
            # Cargar pedido interno
            numero_pedido_interno = data.get('numero_pedido_interno')
            if not numero_pedido_interno:
                rpa_logger.error("‚ùå N√∫mero de pedido interno no encontrado")
                return False
            
            if not self._load_pedido_interno(numero_pedido_interno):
                return False
            
            # Cargar cantidad
            cantidad = data.get('cantidad')
            if not cantidad:
                rpa_logger.error("‚ùå Cantidad no encontrada")
                return False
            
            if not self._load_cantidad(cantidad):
                return False
            
            # Cargar fecha de finalizaci√≥n
            fecha_finalizacion = data.get('fecha_finalizacion')
            if not fecha_finalizacion:
                rpa_logger.error("‚ùå Fecha de finalizaci√≥n no encontrada")
                return False
            
            if not self._load_fecha_finalizacion(fecha_finalizacion):
                return False
            
            # Tomar screenshot final
            if not self._take_screenshot():
                return False
            
            rpa_logger.info("‚úÖ Orden de producci√≥n procesada exitosamente")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error procesando orden de producci√≥n: {e}")
            return False
    
    def _click_create_button(self) -> bool:
        """Busca y hace clic en el bot√≥n 'Crear'"""
        try:
            import cv2
            import numpy as np
            
            # Tomar screenshot
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            # Buscar bot√≥n crear
            crear_button_ref = cv2.imread('./rpa/vision/reference_images/production/sap_produccion_crear_button.png', cv2.IMREAD_COLOR)
            
            if crear_button_ref is not None:
                result = cv2.matchTemplate(screenshot_cv, crear_button_ref, cv2.TM_CCOEFF_NORMED)
                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                
                confidence_threshold = self.production_config.get('template_matching', {}).get('field_confidence', 0.8)
                
                if max_val > confidence_threshold:
                    w = crear_button_ref.shape[1]
                    h = crear_button_ref.shape[0]
                    center_x = max_loc[0] + w // 2
                    center_y = max_loc[1] + h // 2
                    
                    pyautogui.click(center_x, center_y)
                    rpa_logger.info(f"‚úÖ Bot√≥n crear encontrado y clickeado (confianza: {max_val:.3f})")
                    return True
                else:
                    rpa_logger.error(f"‚ùå Bot√≥n crear no encontrado (confianza: {max_val:.3f})")
                    return False
            else:
                rpa_logger.error("‚ùå Imagen de referencia del bot√≥n crear no encontrada")
                return False
                
        except Exception as e:
            rpa_logger.error(f"‚ùå Error buscando bot√≥n crear: {e}")
            return False
    
    def _load_articulo(self, numero_articulo: str) -> bool:
        """Carga el n√∫mero de art√≠culo en el campo correspondiente"""
        try:
            # Navegar al campo art√≠culo
            tabs = self.production_config.get('form_fields', {}).get('articulo_tabs', 2)
            for _ in range(tabs):
                pyautogui.press('tab')
            
            # Escribir el n√∫mero de art√≠culo
            pyautogui.write(str(numero_articulo))
            time.sleep(self.production_config.get('form_fields', {}).get('field_input_delay', 0.5))
            
            rpa_logger.info(f"‚úÖ Art√≠culo cargado: {numero_articulo}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error cargando art√≠culo: {e}")
            return False
    
    def _load_pedido_interno(self, numero_pedido: str) -> bool:
        """Carga el n√∫mero de pedido interno"""
        try:
            # Navegar al campo pedido interno
            tabs = self.production_config.get('form_fields', {}).get('pedido_interno_tabs', 3)
            for _ in range(tabs):
                pyautogui.press('tab')
            
            # Escribir el n√∫mero de pedido
            pyautogui.write(str(numero_pedido))
            time.sleep(self.production_config.get('form_fields', {}).get('field_input_delay', 0.5))
            
            rpa_logger.info(f"‚úÖ Pedido interno cargado: {numero_pedido}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error cargando pedido interno: {e}")
            return False
    
    def _load_cantidad(self, cantidad: int) -> bool:
        """Carga la cantidad en el campo correspondiente"""
        try:
            # Navegar al campo cantidad
            tabs = self.production_config.get('form_fields', {}).get('cantidad_tabs', 2)
            for _ in range(tabs):
                pyautogui.press('tab')
            
            # Escribir la cantidad
            pyautogui.write(str(cantidad))
            time.sleep(self.production_config.get('form_fields', {}).get('field_input_delay', 0.5))
            
            rpa_logger.info(f"‚úÖ Cantidad cargada: {cantidad}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error cargando cantidad: {e}")
            return False
    
    def _load_fecha_finalizacion(self, fecha: str) -> bool:
        """Carga la fecha de finalizaci√≥n"""
        try:
            # Navegar al campo fecha
            tabs = self.production_config.get('form_fields', {}).get('fecha_finalizacion_tabs', 3)
            for _ in range(tabs):
                pyautogui.press('tab')
            
            # Escribir la fecha
            pyautogui.write(fecha)
            time.sleep(self.production_config.get('form_fields', {}).get('field_input_delay', 0.5))
            
            rpa_logger.info(f"‚úÖ Fecha de finalizaci√≥n cargada: {fecha}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error cargando fecha de finalizaci√≥n: {e}")
            return False
    
    def _take_screenshot(self) -> bool:
        """Toma un screenshot del formulario completado"""
        try:
            # Crear directorio de screenshots si no existe
            screenshot_dir = "screenshots"
            if not os.path.exists(screenshot_dir):
                os.makedirs(screenshot_dir)
            
            # Tomar screenshot
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"production_order_{timestamp}.png"
            filepath = os.path.join(screenshot_dir, filename)
            
            screenshot = pyautogui.screenshot()
            screenshot.save(filepath)
            
            rpa_logger.info(f"‚úÖ Screenshot guardado: {filepath}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error tomando screenshot: {e}")
            return False
    
    def _validate_production_data(self, data: Dict[str, Any]) -> bool:
        """Valida que los datos de la orden de producci√≥n sean correctos"""
        required_fields = ['numero_articulo', 'numero_pedido_interno', 'cantidad', 'fecha_finalizacion']
        
        for field in required_fields:
            if field not in data:
                rpa_logger.error(f"‚ùå Campo requerido faltante: {field}")
                return False
        
        # Validar cantidad
        cantidad = data.get('cantidad')
        if not isinstance(cantidad, (int, float)) or cantidad <= 0:
            rpa_logger.error("‚ùå Cantidad debe ser un n√∫mero positivo")
            return False
        
        # Validar fecha
        fecha = data.get('fecha_finalizacion')
        if not fecha or len(fecha) != 10:  # DD/MM/YYYY
            rpa_logger.error("‚ùå Formato de fecha inv√°lido (debe ser DD/MM/YYYY)")
            return False
        
        return True
    
    def get_module_info(self) -> Dict[str, Any]:
        """Retorna informaci√≥n del m√≥dulo"""
        return {
            "name": "√ìrdenes de Producci√≥n",
            "description": "Automatizaci√≥n de √≥rdenes de producci√≥n en SAP Business One",
            "version": "1.0.0",
            "status": "ready",
            "supported_fields": [
                "numero_articulo",
                "numero_pedido_interno",
                "cantidad",
                "fecha_finalizacion",
                "unidad_medida",
                "centro_trabajo"
            ]
        }
    
    def test_module(self) -> bool:
        """Ejecuta pruebas del m√≥dulo"""
        try:
            rpa_logger.info("üß™ Iniciando pruebas del m√≥dulo de producci√≥n...")
            
            # Probar navegaci√≥n
            if not self.navigate_to_production():
                rpa_logger.error("‚ùå Prueba de navegaci√≥n fall√≥")
                return False
            
            rpa_logger.info("‚úÖ Pruebas del m√≥dulo de producci√≥n completadas")
            return True
            
        except Exception as e:
            rpa_logger.error(f"‚ùå Error en pruebas del m√≥dulo: {e}")
            return False
