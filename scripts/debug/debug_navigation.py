#!/usr/bin/env python3
"""
Script de diagn√≥stico detallado para la navegaci√≥n a √≥rdenes de ventas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.simple_logger import rpa_logger
import time
import pyautogui
import cv2
import numpy as np

def debug_navigation_step_by_step():
    """Diagn√≥stico paso a paso de la navegaci√≥n"""
    print("=== DIAGN√ìSTICO DETALLADO DE NAVEGACI√ìN ===")
    print("Este script diagnosticar√° exactamente d√≥nde falla la navegaci√≥n")
    print()
    
    # Retraso para cambio manual de pantalla
    print("‚è≥ Esperando 5 segundos para cambio manual de pantalla...")
    print("Por favor, navega a SAP ‚Üí M√≥dulos ‚Üí Ventas y abre el men√∫ de ventas")
    time.sleep(5)
    print("‚úÖ Retraso completado")
    print()
    
    try:
        vision = Vision()
        
        # PASO 1: Verificar que estamos en SAP
        print("üîç PASO 1: Verificando que estamos en SAP...")
        sap_desktop = vision.is_sap_desktop_visible()
        print(f"   Resultado: {'‚úÖ En SAP' if sap_desktop else '‚ùå No en SAP'}")
        
        # PASO 2: Tomar captura de pantalla actual
        print("\nüì∏ PASO 2: Tomando captura de pantalla actual...")
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        print(f"   ‚úÖ Captura tomada: {screenshot.size[0]}x{screenshot.size[1]} p√≠xeles")
        
        # Guardar captura para an√°lisis
        cv2.imwrite("debug_current_screen.png", screenshot_cv)
        print("   üíæ Captura guardada como 'debug_current_screen.png'")
        
        # PASO 3: Verificar que la imagen de referencia existe
        print("\nüñºÔ∏è PASO 3: Verificando imagen de referencia...")
        reference_path = "./rpa/vision/reference_images/sap_ventas_order_button.png"
        if os.path.exists(reference_path):
            print(f"   ‚úÖ Imagen de referencia encontrada: {reference_path}")
            reference_img = cv2.imread(reference_path, cv2.IMREAD_COLOR)
            if reference_img is not None:
                print(f"   ‚úÖ Imagen cargada: {reference_img.shape[1]}x{reference_img.shape[0]} p√≠xeles")
            else:
                print("   ‚ùå Error al cargar la imagen de referencia")
                return False
        else:
            print(f"   ‚ùå Imagen de referencia no encontrada: {reference_path}")
            return False
        
        # PASO 4: Realizar template matching manual
        print("\nüîç PASO 4: Realizando template matching manual...")
        result = cv2.matchTemplate(screenshot_cv, reference_img, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
        
        print(f"   üìä Confianza m√°xima: {max_val:.4f}")
        print(f"   üìç Ubicaci√≥n m√°xima: {max_loc}")
        
        # PASO 5: Verificar umbral de confianza
        print("\nüéØ PASO 5: Verificando umbral de confianza...")
        confidence_threshold = 0.7
        print(f"   Umbral configurado: {confidence_threshold}")
        print(f"   Confianza obtenida: {max_val:.4f}")
        
        if max_val > confidence_threshold:
            print("   ‚úÖ Confianza suficiente - bot√≥n detectado")
            
            # Calcular coordenadas del centro
            w_button = reference_img.shape[1]
            h_button = reference_img.shape[0]
            center_x = max_loc[0] + w_button // 2
            center_y = max_loc[1] + h_button // 2
            
            print(f"   üìç Coordenadas del centro: ({center_x}, {center_y})")
            print(f"   üìè Dimensiones del bot√≥n: {w_button}x{h_button}")
            
            # PASO 6: Simular movimiento del mouse
            print("\nüñ±Ô∏è PASO 6: Simulando movimiento del mouse...")
            print(f"   Moviendo mouse a: ({center_x}, {center_y})")
            
            # Obtener posici√≥n actual del mouse
            current_pos = pyautogui.position()
            print(f"   Posici√≥n actual del mouse: {current_pos}")
            
            # Mover mouse (sin hacer clic por seguridad)
            pyautogui.moveTo(center_x, center_y, duration=1)
            time.sleep(0.5)
            
            # Verificar nueva posici√≥n
            new_pos = pyautogui.position()
            print(f"   Nueva posici√≥n del mouse: {new_pos}")
            
            if abs(new_pos[0] - center_x) < 5 and abs(new_pos[1] - center_y) < 5:
                print("   ‚úÖ Mouse movido correctamente")
                
                # Preguntar si hacer clic
                print("\n‚ùì ¬øDeseas que haga clic en el bot√≥n? (s/n): ", end="")
                try:
                    response = input().lower()
                    if response == 's':
                        print("   üñ±Ô∏è Haciendo clic...")
                        pyautogui.click()
                        print("   ‚úÖ Clic ejecutado")
                        time.sleep(2)
                        print("   ‚è≥ Esperando 2 segundos para ver resultado...")
                    else:
                        print("   ‚è≠Ô∏è Clic omitido por seguridad")
                except:
                    print("   ‚è≠Ô∏è Clic omitido por seguridad")
            else:
                print("   ‚ùå Error al mover el mouse")
                return False
            
        else:
            print("   ‚ùå Confianza insuficiente - bot√≥n no detectado")
            print("   üí° Posibles causas:")
            print("      - El men√∫ de ventas no est√° abierto")
            print("      - La imagen de referencia no coincide")
            print("      - La resoluci√≥n o tema de SAP es diferente")
            print("      - El bot√≥n est√° en una ubicaci√≥n diferente")
            
            # Mostrar las mejores coincidencias
            print("\nüîç Buscando las mejores coincidencias...")
            threshold = 0.3  # Umbral m√°s bajo para debugging
            locations = np.where(result >= threshold)
            if len(locations[0]) > 0:
                print(f"   Encontradas {len(locations[0])} coincidencias con confianza >= {threshold}")
                for i in range(min(5, len(locations[0]))):  # Mostrar m√°ximo 5
                    y, x = locations[0][i], locations[1][i]
                    conf = result[y, x]
                    print(f"      Coincidencia {i+1}: ({x}, {y}) - Confianza: {conf:.4f}")
            else:
                print("   No se encontraron coincidencias significativas")
            
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante el diagn√≥stico: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_manual_navigation():
    """Prueba la navegaci√≥n manual paso a paso"""
    print("\n=== PRUEBA DE NAVEGACI√ìN MANUAL ===")
    print("Este script simular√° la navegaci√≥n manual paso a paso")
    print()
    
    try:
        print("üñ•Ô∏è PASO 1: Activando ventana del escritorio remoto...")
        windows = pyautogui.getWindowsWithTitle("20.96.6.64 - Conexi√≥n a Escritorio remoto")
        if windows:
            window = windows[0]
            if not window.isActive:
                window.activate()
                time.sleep(2)
                print("   ‚úÖ Ventana activada")
            else:
                print("   ‚úÖ Ventana ya estaba activa")
        else:
            print("   ‚ùå Ventana del escritorio remoto no encontrada")
            return False
        
        print("\n‚å®Ô∏è PASO 2: Abriendo men√∫ m√≥dulos (Alt + M)...")
        pyautogui.keyDown('alt')
        time.sleep(0.1)
        pyautogui.press('m')
        time.sleep(0.1)
        pyautogui.keyUp('alt')
        time.sleep(2)
        print("   ‚úÖ Men√∫ m√≥dulos abierto")
        
        print("\n‚å®Ô∏è PASO 3: Seleccionando m√≥dulo Ventas (V)...")
        pyautogui.press('v')
        time.sleep(2)
        print("   ‚úÖ M√≥dulo Ventas seleccionado")
        
        print("\nüîç PASO 4: Buscando bot√≥n de Orden de Ventas...")
        vision = Vision()
        coordinates = vision.get_ventas_order_button_coordinates()
        
        if coordinates:
            print(f"   ‚úÖ Bot√≥n encontrado en: {coordinates}")
            
            print("\nüñ±Ô∏è PASO 5: Moviendo mouse al bot√≥n...")
            pyautogui.moveTo(coordinates, duration=1)
            time.sleep(1)
            print("   ‚úÖ Mouse movido")
            
            print("\nüñ±Ô∏è PASO 6: Haciendo clic...")
            pyautogui.click()
            time.sleep(3)
            print("   ‚úÖ Clic ejecutado")
            
            print("\nüéâ ¬°NAVEGACI√ìN MANUAL COMPLETADA!")
            return True
        else:
            print("   ‚ùå Bot√≥n no encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en navegaci√≥n manual: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîß SISTEMA DE DIAGN√ìSTICO DE NAVEGACI√ìN")
    print("Versi√≥n: An√°lisis detallado de problemas de navegaci√≥n")
    print()
    
    # Diagn√≥stico paso a paso
    debug_success = debug_navigation_step_by_step()
    
    if debug_success:
        print("\n" + "="*50)
        # Prueba de navegaci√≥n manual
        nav_success = test_manual_navigation()
        
        if nav_success:
            print("\nüéâ ¬°DIAGN√ìSTICO COMPLETADO EXITOSAMENTE!")
            print("‚úÖ La navegaci√≥n deber√≠a funcionar correctamente")
        else:
            print("\n‚ùå NAVEGACI√ìN MANUAL FALLIDA")
            print("‚ö†Ô∏è Revisar la configuraci√≥n de SAP")
    else:
        print("\n‚ùå DIAGN√ìSTICO FALLIDO")
        print("‚ö†Ô∏è Revisar las im√°genes de referencia y la configuraci√≥n")
    
    print("\nüëã ¬°Hasta luego!")
