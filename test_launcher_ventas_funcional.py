#!/usr/bin/env python3
"""
Script de prueba para verificar el launcher funcional de ventas
"""

import os
import sys
import json
import glob
from datetime import datetime

def test_launcher_setup():
    """Prueba la configuraci√≥n del launcher funcional"""
    print("üß™ PRUEBA: Configuraci√≥n del Launcher Funcional de Ventas")
    print("=" * 60)
    
    # 1. Verificar que existe el launcher funcional
    print("\n1Ô∏è‚É£ Verificando archivos del launcher...")
    if os.path.exists("launcher_funcional.py"):
        print("   ‚úÖ launcher_funcional.py encontrado")
    else:
        print("   ‚ùå launcher_funcional.py NO encontrado")
        return False
    
    if os.path.exists("launcher_ventas_funcional.bat"):
        print("   ‚úÖ launcher_ventas_funcional.bat encontrado")
    else:
        print("   ‚ùå launcher_ventas_funcional.bat NO encontrado")
        return False
    
    # 2. Verificar directorios del RPA
    print("\n2Ô∏è‚É£ Verificando componentes del RPA...")
    rpa_components = [
        "rpa/simple_logger.py",
        "rpa/config_manager.py", 
        "rpa/vision/main.py",
        "rpa/modules/sales_order/sales_order_handler.py"
    ]
    
    for component in rpa_components:
        if os.path.exists(component):
            print(f"   ‚úÖ {component} encontrado")
        else:
            print(f"   ‚ùå {component} NO encontrado")
            return False
    
    # 3. Verificar directorios de datos
    print("\n3Ô∏è‚É£ Verificando directorios de datos...")
    data_dirs = [
        "data/outputs_json/sales_order/01_Pendiente",
        "data/outputs_json/sales_order/02_Procesando", 
        "data/outputs_json/sales_order/03_Completado",
        "data/outputs_json/sales_order/04_Error"
    ]
    
    for data_dir in data_dirs:
        if os.path.exists(data_dir):
            print(f"   ‚úÖ {data_dir} encontrado")
        else:
            print(f"   ‚ùå {data_dir} NO encontrado")
            os.makedirs(data_dir, exist_ok=True)
            print(f"   üîß {data_dir} creado")
    
    # 4. Verificar archivos pendientes
    print("\n4Ô∏è‚É£ Verificando archivos pendientes...")
    pending_dir = "data/outputs_json/sales_order/01_Pendiente"
    pending_files = glob.glob(os.path.join(pending_dir, "*.json"))
    
    if pending_files:
        print(f"   ‚úÖ {len(pending_files)} archivos pendientes encontrados:")
        for file in pending_files[:3]:  # Mostrar solo los primeros 3
            filename = os.path.basename(file)
            print(f"      üìÑ {filename}")
        if len(pending_files) > 3:
            print(f"      ... y {len(pending_files) - 3} m√°s")
    else:
        print("   ‚ö†Ô∏è No hay archivos pendientes")
    
    # 5. Verificar estructura de un archivo JSON
    print("\n5Ô∏è‚É£ Verificando estructura de archivo JSON...")
    if pending_files:
        try:
            with open(pending_files[0], 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            required_fields = ['orden_compra', 'comprador', 'items', 'fecha_entrega']
            missing_fields = []
            
            for field in required_fields:
                if field in data:
                    print(f"   ‚úÖ Campo '{field}' presente")
                else:
                    print(f"   ‚ùå Campo '{field}' faltante")
                    missing_fields.append(field)
            
            if not missing_fields:
                print("   ‚úÖ Estructura JSON v√°lida")
            else:
                print(f"   ‚ùå Campos faltantes: {missing_fields}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error leyendo JSON: {str(e)}")
            return False
    
    # 6. Verificar configuraci√≥n
    print("\n6Ô∏è‚É£ Verificando configuraci√≥n...")
    if os.path.exists("config.yaml"):
        print("   ‚úÖ config.yaml encontrado")
    else:
        print("   ‚ö†Ô∏è config.yaml no encontrado (se usar√° configuraci√≥n por defecto)")
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBA COMPLETADA: Launcher funcional est√° configurado correctamente")
    print("\nüöÄ Para ejecutar el launcher funcional:")
    print("   Opci√≥n 1: Hacer doble clic en 'launcher_ventas_funcional.bat'")
    print("   Opci√≥n 2: Ejecutar 'python launcher_funcional.py'")
    print("\n‚ö†Ô∏è IMPORTANTE:")
    print("   - Aseg√∫rate de que SAP est√© abierto")
    print("   - Verifica la conexi√≥n al escritorio remoto")
    print("   - El launcher seleccionar√° autom√°ticamente el m√≥dulo de ventas")
    
    return True

def test_imports():
    """Prueba las importaciones del launcher funcional"""
    print("\nüß™ PRUEBA: Importaciones del Launcher Funcional")
    print("=" * 60)
    
    try:
        # Agregar el directorio ra√≠z al path
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        # Intentar importar componentes
        print("üì¶ Importando componentes del RPA...")
        
        from rpa.simple_logger import rpa_logger
        print("   ‚úÖ rpa_logger importado")
        
        from rpa.config_manager import ConfigManager
        print("   ‚úÖ ConfigManager importado")
        
        from rpa.vision.main import Vision
        print("   ‚úÖ Vision importado")
        
        from rpa.modules.sales_order.sales_order_handler import SalesOrderHandler
        print("   ‚úÖ SalesOrderHandler importado")
        
        print("\n‚úÖ Todas las importaciones exitosas")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en importaciones: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîç DIAGN√ìSTICO DEL LAUNCHER FUNCIONAL DE VENTAS")
    print("=" * 60)
    
    # Ejecutar pruebas
    setup_ok = test_launcher_setup()
    imports_ok = test_imports()
    
    print("\n" + "=" * 60)
    if setup_ok and imports_ok:
        print("üéâ TODAS LAS PRUEBAS EXITOSAS")
        print("El launcher funcional est√° listo para usar")
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("Revisa los errores anteriores")
    
    print("\nPresiona Enter para salir...")
    input()
