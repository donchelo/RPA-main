#!/usr/bin/env python3
"""
Script de prueba para el m√≥dulo de √≥rdenes de producci√≥n con datos reales
Versi√≥n completamente autom√°tica
"""

import os
import sys
import time
import json
import cv2
import numpy as np
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.config_manager import ConfigManager
from rpa.modules.production_order import ProductionOrderHandler
from rpa.simple_logger import rpa_logger


def crear_datos_reales():
    """Crear datos reales para la prueba de producci√≥n"""
    datos_reales = {
        "numero_articulo": "101846",
        "numero_pedido_interno": "6107",
        "cantidad": 2000,
        "fecha_finalizacion": "12/09/2025",
        "unidad_medida": "PCS",
        "centro_trabajo": "CT-01",
        "observaciones": "Orden de producci√≥n real para pruebas del RPA"
    }
    return datos_reales


def mostrar_datos_prueba(datos):
    """Mostrar los datos de prueba de forma clara"""
    print("\nüìã DATOS DE PRUEBA REALES")
    print("=" * 50)
    print(f"üè∑Ô∏è  Art√≠culo: {datos['numero_articulo']}")
    print(f"üìù Pedido Interno: {datos['numero_pedido_interno']}")
    print(f"üìä Cantidad: {datos['cantidad']} {datos['unidad_medida']}")
    print(f"üìÖ Fecha Finalizaci√≥n: {datos['fecha_finalizacion']}")
    print(f"üè≠ Centro Trabajo: {datos['centro_trabajo']}")
    print(f"üí¨ Observaciones: {datos['observaciones']}")
    print("=" * 50)


def cambiar_a_escritorio_remoto():
    """Funci√≥n para cambiar al escritorio remoto usando Alt+Tab"""
    print("üîÑ Cambiando al escritorio remoto...")
    
    try:
        import pyautogui
        
        # M√©todo simple: usar Alt+Tab para cambiar a la ventana anterior
        print("   - Usando Alt+Tab para cambiar ventana...")
        pyautogui.hotkey('alt', 'tab')
        time.sleep(2.0)  # Esperar a que se active la ventana
        
        print("‚úÖ Cambio de ventana completado")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Error cambiando ventana: {e}")
        print("üí° El script continuar√°, pero aseg√∫rate de que el escritorio remoto est√© activo")
        time.sleep(3.0)
        return False


def verificar_formulario_abierto(vision):
    """Verificar que el formulario de producci√≥n est√© abierto"""
    print("üîç Verificando que el formulario est√© abierto...")
    
    try:
        import pyautogui
        
        # Tomar screenshot y buscar elementos del formulario
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        # Buscar imagen del formulario de producci√≥n
        form_ref = cv2.imread('./rpa/vision/reference_images/production/sap_produccion_form.png', cv2.IMREAD_COLOR)
        
        if form_ref is not None:
            result = cv2.matchTemplate(screenshot_cv, form_ref, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            if max_val > 0.7:  # Umbral de confianza
                print(f"‚úÖ Formulario de producci√≥n detectado (confianza: {max_val:.3f})")
                return True
            else:
                print(f"‚ö†Ô∏è  Formulario no detectado claramente (confianza: {max_val:.3f})")
                return False
        else:
            print("‚ö†Ô∏è  Imagen de referencia del formulario no encontrada")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error verificando formulario: {e}")
        return False


def test_produccion_real():
    """Funci√≥n principal para probar producci√≥n con datos reales"""
    print("üß™ PRUEBA DE PRODUCCI√ìN CON DATOS REALES")
    print("=" * 60)
    
    try:
        # 1. Inicializar componentes
        print("üîÑ Inicializando componentes del RPA...")
        config = ConfigManager()
        vision = Vision()
        production_handler = ProductionOrderHandler(vision, config)
        
        # 2. Crear datos reales
        print("üîÑ Creando datos reales...")
        datos_reales = crear_datos_reales()
        mostrar_datos_prueba(datos_reales)
        
        # 3. Confirmaci√≥n inicial √∫nica
        print("\n‚è∏Ô∏è  CONFIRMACI√ìN INICIAL")
        print("=" * 40)
        print("üîß El script proceder√° autom√°ticamente hasta el final:")
        print("1. Cambiar√° al escritorio remoto")
        print("2. Navegar√° a SAP")
        print("3. Abrir√° el formulario de producci√≥n")
        print("4. Llenar√° los datos autom√°ticamente")
        print("5. NO crear√° la orden (esperar√° tu decisi√≥n manual)")
        
        input("\n‚è∏Ô∏è  Presiona ENTER para comenzar la automatizaci√≥n completa...")
        
        # 4. Inicio autom√°tico
        print("\nüöÄ INICIANDO AUTOMATIZACI√ìN COMPLETA...")
        print("   El script proceder√° autom√°ticamente hasta el final")
        
        # 5. Cambiar al escritorio remoto
        print("\nüîÑ PASO 0: Cambiando al escritorio remoto...")
        escritorio_remoto_activado = cambiar_a_escritorio_remoto()
        
        if escritorio_remoto_activado:
            print("‚úÖ Escritorio remoto activado exitosamente")
        else:
            print("‚ö†Ô∏è  Continuando sin confirmaci√≥n del escritorio remoto")
        
        # 6. Ejecutar navegaci√≥n
        print("\nüîÑ PASO 1: Navegando al m√≥dulo de producci√≥n...")
        print("   - Presionando Alt+M...")
        print("   - Presionando P...")
        print("   - Buscando bot√≥n 'Orden de Fabricaci√≥n'...")
        
        navigation_success = production_handler.navigate_to_production()
        
        if not navigation_success:
            print("‚ùå Error en la navegaci√≥n.")
            print("üí° Verifica:")
            print("   - Que SAP est√© abierto")
            print("   - Que est√©s en la pantalla principal")
            print("   - Que las im√°genes de referencia existan")
            return False
        
        print("‚úÖ Navegaci√≥n completada exitosamente")
        
        # 7. Verificar que el formulario est√© abierto
        print("\nüîÑ PASO 2: Verificando formulario...")
        time.sleep(2.0)  # Esperar a que se abra el formulario
        
        formulario_abierto = verificar_formulario_abierto(vision)
        
        if not formulario_abierto:
            print("‚ö†Ô∏è  El formulario podr√≠a no estar completamente abierto")
            print("üí° Continuando con el llenado de datos...")
        
        # 8. Procesar orden de producci√≥n autom√°ticamente
        print("\nüîÑ PASO 3: Llenando formulario con datos reales...")
        print("   - Cargando art√≠culo: 101846...")
        print("   - Cargando pedido interno: 6107...")
        print("   - Cargando cantidad: 2000...")
        print("   - Cargando fecha de finalizaci√≥n: 12/09/2025...")
        
        success = production_handler.process_production_order(
            datos_reales, 
            auto_click_crear=False  # NO hacer clic autom√°tico
        )
        
        if success:
            print("\nüéâ FORMULARIO COMPLETADO EXITOSAMENTE")
            print("=" * 50)
            print("‚úÖ Todos los campos han sido llenados autom√°ticamente")
            print("‚úÖ Los datos reales est√°n en el formulario")
            print("‚úÖ El formulario est√° listo para revisi√≥n")
            
            print("\nüí° DATOS CARGADOS:")
            print(f"   - Art√≠culo: {datos_reales['numero_articulo']}")
            print(f"   - Pedido: {datos_reales['numero_pedido_interno']}")
            print(f"   - Cantidad: {datos_reales['cantidad']}")
            print(f"   - Fecha: {datos_reales['fecha_finalizacion']}")
            
            print("\nüéØ DECISI√ìN MANUAL REQUERIDA:")
            print("   - Haz clic en 'Crear' si los datos est√°n correctos")
            print("   - Haz clic en 'Borrar' si quieres cancelar")
            print("   - Modifica cualquier campo si es necesario")
            
            # 9. Finalizaci√≥n autom√°tica
            print("\n‚úÖ AUTOMATIZACI√ìN COMPLETADA")
            print("=" * 40)
            print("El script ha terminado exitosamente.")
            print("Los datos est√°n cargados en el formulario.")
            print("Toma tu decisi√≥n manual en SAP cuando est√©s listo.")
            print("‚úÖ Prueba de producci√≥n con datos reales finalizada correctamente")
            
            # 10. Resumen final
            print("\nüìä RESUMEN DE LA PRUEBA")
            print("=" * 40)
            print("‚úÖ Cambio a escritorio remoto: " + ("Exitoso" if escritorio_remoto_activado else "Manual"))
            print("‚úÖ Navegaci√≥n: Exitosa")
            print("‚úÖ Verificaci√≥n de formulario: " + ("Exitosa" if formulario_abierto else "Manual"))
            print("‚úÖ Carga de datos: Exitosa")
            print("‚úÖ Validaci√≥n: Exitosa")
            print("‚úÖ Control manual: Funcionando")
            print("‚úÖ M√≥dulo de producci√≥n: LISTO PARA USO")
            
        else:
            print("‚ùå Error procesando la orden de producci√≥n")
            print("üí° Verifica los logs para m√°s detalles")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        rpa_logger.error(f"Error en test_produccion_real: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBA DE PRODUCCI√ìN CON DATOS REALES")
    print("=" * 60)
    print("üéØ Objetivo: Probar el m√≥dulo de producci√≥n con datos reales")
    print("üéØ Modo: Completamente autom√°tico hasta la decisi√≥n final")
    print("üéØ Caracter√≠stica: Datos reales de producci√≥n")
    print("üéØ Resultado esperado: Formulario llenado autom√°ticamente")
    
    # Ejecutar prueba
    if test_produccion_real():
        print("\nüéâ PRUEBA COMPLETADA EXITOSAMENTE")
        print("=" * 60)
        print("‚úÖ El m√≥dulo de producci√≥n funciona correctamente")
        print("‚úÖ Los datos reales se cargaron sin problemas")
        print("‚úÖ La automatizaci√≥n completa funciona")
        print("‚úÖ El m√≥dulo est√° listo para uso en producci√≥n")
    else:
        print("\n‚ùå LA PRUEBA FALL√ì")
        print("=" * 60)
        print("üí° Revisa los errores y verifica la configuraci√≥n")
        print("üí° Aseg√∫rate de que SAP est√© abierto y accesible")


if __name__ == "__main__":
    main()
