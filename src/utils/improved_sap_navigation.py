#!/usr/bin/env python3
"""
Script mejorado para navegaci√≥n a "Orden de Venta" en SAP
Incluye mejor manejo de errores, tiempos de espera y verificaci√≥n de estado
"""

import time
import sys
import os
import cv2
import numpy as np
import pyautogui

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.screen_detector import ScreenDetector, ScreenState
from rpa.simple_logger import rpa_logger
from rpa.smart_waits import smart_sleep

class ImprovedSAPNavigation:
    """Navegaci√≥n mejorada a SAP con mejor manejo de errores"""
    
    def __init__(self):
        self.vision = Vision()
        self.detector = ScreenDetector()
        
        # Configurar PyAutoGUI
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.5
        
        # Tiempos de espera configurables
        self.wait_times = {
            'menu_open': 2.0,      # Tiempo para que se abra un men√∫
            'menu_navigate': 1.5,  # Tiempo entre navegaci√≥n de men√∫s
            'page_load': 5.0,      # Tiempo para que cargue una p√°gina
            'verification': 3.0    # Tiempo para verificar estado
        }
    
    def navigate_to_sales_order(self, max_attempts: int = 3) -> bool:
        """
        Navega al formulario de √≥rdenes de venta con mejor manejo de errores
        
        Args:
            max_attempts: N√∫mero m√°ximo de intentos
            
        Returns:
            True si se logr√≥ llegar al formulario
        """
        print("üöÄ Iniciando navegaci√≥n mejorada a Orden de Venta")
        print()
        
        for attempt in range(max_attempts):
            print(f"üìã Intento {attempt + 1}/{max_attempts}")
            
            try:
                # Verificar estado inicial
                if not self._verify_sap_desktop():
                    print("‚ùå No estamos en SAP Desktop")
                    return False
                
                # Paso 1: Hacer clic en m√≥dulos
                if not self._click_modulos_menu():
                    print("‚ùå No se pudo hacer clic en m√≥dulos")
                    continue
                
                # Paso 2: Hacer clic en ventas
                if not self._click_ventas_menu():
                    print("‚ùå No se pudo hacer clic en ventas")
                    continue
                
                # Paso 3: Hacer clic en orden de venta
                if not self._click_sales_order():
                    print("‚ùå No se pudo hacer clic en orden de venta")
                    continue
                
                # Paso 4: Verificar que llegamos al formulario
                if self._verify_sales_order_form():
                    print("‚úÖ ¬°Navegaci√≥n exitosa! Llegamos al formulario de √≥rdenes")
                    return True
                else:
                    print("‚ùå No se detect√≥ el formulario de √≥rdenes")
                    continue
                
            except Exception as e:
                print(f"‚ùå Error en intento {attempt + 1}: {e}")
                rpa_logger.log_error("NAVEGACI√ìN SAP", f"Error en intento {attempt + 1}: {e}")
                
                if attempt < max_attempts - 1:
                    print("‚è≥ Esperando antes del siguiente intento...")
                    smart_sleep(3)
        
        print("‚ùå No se pudo completar la navegaci√≥n despu√©s de todos los intentos")
        return False
    
    def _verify_sap_desktop(self) -> bool:
        """Verifica que estamos en SAP Desktop"""
        print("üîç Verificando que estamos en SAP Desktop...")
        
        result = self.detector.detect_current_screen()
        if result.state == ScreenState.SAP_DESKTOP and result.confidence > 0.7:
            print(f"‚úÖ Confirmado: SAP Desktop (confianza: {result.confidence:.3f})")
            return True
        else:
            print(f"‚ùå Estado actual: {result.state.value} (confianza: {result.confidence:.3f})")
            return False
    
    def _click_modulos_menu(self) -> bool:
        """Hace clic en el men√∫ de m√≥dulos"""
        print("üîç Buscando bot√≥n de m√≥dulos...")
        
        modulos_coords = self.vision.get_modulos_menu_coordinates()
        if not modulos_coords:
            print("‚ùå No se encontr√≥ el bot√≥n de m√≥dulos")
            return False
        
        print(f"‚úÖ Bot√≥n de m√≥dulos encontrado en {modulos_coords}")
        print("üñ±Ô∏è  Haciendo clic en m√≥dulos...")
        
        try:
            pyautogui.click(modulos_coords)
            smart_sleep(self.wait_times['menu_open'])
            
            # Verificar que el men√∫ se abri√≥
            if self._verify_modulos_menu_opened():
                print("‚úÖ Men√∫ de m√≥dulos abierto correctamente")
                return True
            else:
                print("‚ùå El men√∫ de m√≥dulos no se abri√≥")
                return False
                
        except Exception as e:
            print(f"‚ùå Error haciendo clic en m√≥dulos: {e}")
            return False
    
    def _click_ventas_menu(self) -> bool:
        """Hace clic en el men√∫ de ventas"""
        print("üîç Buscando men√∫ de ventas...")
        
        ventas_coords = self.vision.get_ventas_menu_coordinates()
        if not ventas_coords:
            print("‚ùå No se encontr√≥ el men√∫ de ventas")
            return False
        
        print(f"‚úÖ Men√∫ de ventas encontrado en {ventas_coords}")
        print("üñ±Ô∏è  Haciendo clic en ventas...")
        
        try:
            pyautogui.click(ventas_coords)
            smart_sleep(self.wait_times['menu_navigate'])
            
            # Verificar que el submen√∫ se abri√≥
            if self._verify_ventas_menu_opened():
                print("‚úÖ Men√∫ de ventas abierto correctamente")
                return True
            else:
                print("‚ùå El men√∫ de ventas no se abri√≥")
                return False
                
        except Exception as e:
            print(f"‚ùå Error haciendo clic en ventas: {e}")
            return False
    
    def _click_sales_order(self) -> bool:
        """Hace clic en orden de venta"""
        print("üîç Buscando bot√≥n de orden de venta...")
        
        orden_coords = self.vision.get_ventas_order_coordinates()
        if not orden_coords:
            print("‚ùå No se encontr√≥ el bot√≥n de orden de venta")
            
            # Intentar con umbral m√°s bajo
            print("üîç Intentando con umbral m√°s bajo...")
            orden_coords = self._find_sales_order_with_lower_threshold()
            
            if not orden_coords:
                print("‚ùå No se encontr√≥ el bot√≥n incluso con umbral bajo")
                return False
        
        print(f"‚úÖ Bot√≥n de orden de venta encontrado en {orden_coords}")
        print("üñ±Ô∏è  Haciendo clic en orden de venta...")
        
        try:
            pyautogui.click(orden_coords)
            smart_sleep(self.wait_times['page_load'])
            
            print("‚úÖ Clic en orden de venta realizado")
            return True
            
        except Exception as e:
            print(f"‚ùå Error haciendo clic en orden de venta: {e}")
            return False
    
    def _find_sales_order_with_lower_threshold(self) -> tuple:
        """Busca el bot√≥n de orden de venta con umbral m√°s bajo"""
        try:
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            result = cv2.matchTemplate(screenshot_cv, self.vision.sap_ventas_order_button_image, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            print(f"   - Confianza m√°xima: {max_val:.3f}")
            
            if max_val > 0.5:  # Umbral m√°s bajo
                w = self.vision.sap_ventas_order_button_image.shape[1]
                h = self.vision.sap_ventas_order_button_image.shape[0]
                center = (max_loc[0] + w//2, max_loc[1] + h//2)
                print(f"   - Encontrado en: {center}")
                return center
            
            return None
            
        except Exception as e:
            print(f"   ‚ùå Error en b√∫squeda con umbral bajo: {e}")
            return None
    
    def _verify_modulos_menu_opened(self) -> bool:
        """Verifica que el men√∫ de m√≥dulos se abri√≥"""
        # Tomar screenshot y buscar elementos del men√∫
        try:
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            # Buscar el men√∫ de m√≥dulos abierto
            if self.vision.sap_modulos_menu_image is not None:
                result = cv2.matchTemplate(screenshot_cv, self.vision.sap_modulos_menu_image, cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(result)
                return max_val > 0.6
            
            return True  # Si no hay imagen de referencia, asumir que se abri√≥
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error verificando men√∫ de m√≥dulos: {e}")
            return True
    
    def _verify_ventas_menu_opened(self) -> bool:
        """Verifica que el men√∫ de ventas se abri√≥"""
        # Tomar screenshot y buscar elementos del men√∫ de ventas
        try:
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            # Buscar el men√∫ de ventas abierto
            if self.vision.sap_ventas_order_menu_image is not None:
                result = cv2.matchTemplate(screenshot_cv, self.vision.sap_ventas_order_menu_image, cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(result)
                return max_val > 0.6
            
            return True  # Si no hay imagen de referencia, asumir que se abri√≥
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error verificando men√∫ de ventas: {e}")
            return True
    
    def _verify_sales_order_form(self) -> bool:
        """Verifica que llegamos al formulario de √≥rdenes"""
        print("üîç Verificando que llegamos al formulario de √≥rdenes...")
        
        # Esperar un poco m√°s para que cargue
        smart_sleep(self.wait_times['verification'])
        
        result = self.detector.detect_current_screen()
        if result.state == ScreenState.SALES_ORDER_FORM and result.confidence > 0.7:
            print(f"‚úÖ Confirmado: Formulario de √≥rdenes (confianza: {result.confidence:.3f})")
            return True
        else:
            print(f"‚ùå Estado actual: {result.state.value} (confianza: {result.confidence:.3f})")
            return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando navegaci√≥n mejorada a Orden de Venta en SAP")
    print()
    
    # Crear directorio de debug si no existe
    os.makedirs("./debug_screenshots", exist_ok=True)
    
    # Crear navegador
    navigator = ImprovedSAPNavigation()
    
    # Ejecutar navegaci√≥n
    success = navigator.navigate_to_sales_order(max_attempts=3)
    
    print()
    if success:
        print("üéâ ¬°Navegaci√≥n completada exitosamente!")
        print("   El sistema lleg√≥ al formulario de √≥rdenes de venta")
    else:
        print("‚ö†Ô∏è  La navegaci√≥n no fue exitosa")
        print("   Revisa los logs y screenshots para m√°s detalles")
    
    print("\n" + "="*50)

if __name__ == "__main__":
    main()
