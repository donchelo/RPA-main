#!/usr/bin/env python3
"""
Interfaz Unificada RPA - Sistema Centralizado de Automatizaci√≥n
Integra todos los m√≥dulos RPA en una sola interfaz f√°cil de usar
"""

import os
import sys
import json
import time
from typing import Dict, Any, Optional, List
from pathlib import Path
from dataclasses import dataclass
from enum import Enum

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.config_manager import ConfigManager
from rpa.simple_logger import rpa_logger
from rpa.modules.sales_order import SalesOrderHandler
from rpa.modules.production_order import ProductionOrderHandler


class ModuleType(Enum):
    """Tipos de m√≥dulos disponibles"""
    SALES_ORDER = "sales_order"
    PRODUCTION_ORDER = "production_order"


@dataclass
class ModuleInfo:
    """Informaci√≥n de un m√≥dulo RPA"""
    name: str
    description: str
    handler_class: Any
    config_file: str
    test_scripts: List[str]
    status: str = "ready"


class RPAUnifiedInterface:
    """Interfaz unificada para todos los m√≥dulos RPA"""
    
    def __init__(self):
        self.vision = Vision()
        self.config = ConfigManager()
        self.current_module = None
        self.current_handler = None
        
        # Registrar m√≥dulos disponibles
        self.modules = {
            ModuleType.SALES_ORDER: ModuleInfo(
                name="√ìrdenes de Venta",
                description="Automatizaci√≥n de √≥rdenes de venta en SAP Business One",
                handler_class=SalesOrderHandler,
                config_file="rpa/modules/sales_order/sales_order_config.yaml",
                test_scripts=["test_sales_order.py"],
                status="ready"
            ),
            ModuleType.PRODUCTION_ORDER: ModuleInfo(
                name="√ìrdenes de Producci√≥n", 
                description="Automatizaci√≥n de √≥rdenes de producci√≥n en SAP Business One",
                handler_class=ProductionOrderHandler,
                config_file="rpa/modules/production_order/production_order_config.yaml",
                test_scripts=["test_production_order.py"],
                status="ready"
            )
        }
    
    def get_available_modules(self) -> List[ModuleType]:
        """Retorna la lista de m√≥dulos disponibles"""
        return list(self.modules.keys())
    
    def get_module_info(self, module_type: ModuleType) -> Optional[ModuleInfo]:
        """Obtiene informaci√≥n de un m√≥dulo espec√≠fico"""
        return self.modules.get(module_type)
    
    def select_module(self, module_type: ModuleType) -> bool:
        """Selecciona un m√≥dulo para usar"""
        try:
            if module_type not in self.modules:
                rpa_logger.error(f"M√≥dulo {module_type.value} no encontrado")
                return False
            
            module_info = self.modules[module_type]
            
            # Crear instancia del handler
            self.current_handler = module_info.handler_class(self.vision, self.config)
            self.current_module = module_type
            
            rpa_logger.info(f"‚úÖ M√≥dulo seleccionado: {module_info.name}")
            return True
            
        except Exception as e:
            rpa_logger.error(f"Error seleccionando m√≥dulo {module_type.value}: {e}")
            return False
    
    def get_current_module(self) -> Optional[ModuleType]:
        """Retorna el m√≥dulo actualmente seleccionado"""
        return self.current_module
    
    def get_current_handler(self):
        """Retorna el handler del m√≥dulo actual"""
        return self.current_handler
    
    def process_file(self, file_path: str, module_type: ModuleType) -> bool:
        """Procesa un archivo JSON con el m√≥dulo especificado"""
        try:
            # Seleccionar m√≥dulo si no est√° seleccionado
            if self.current_module != module_type:
                if not self.select_module(module_type):
                    return False
            
            # Cargar datos del archivo
            if not os.path.exists(file_path):
                rpa_logger.error(f"Archivo no encontrado: {file_path}")
                return False
            
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Procesar seg√∫n el tipo de m√≥dulo
            if module_type == ModuleType.SALES_ORDER:
                return self.current_handler.process_sales_order(data)
            elif module_type == ModuleType.PRODUCTION_ORDER:
                return self.current_handler.process_production_order(data)
            else:
                rpa_logger.error(f"Tipo de m√≥dulo no soportado: {module_type.value}")
                return False
                
        except Exception as e:
            rpa_logger.error(f"Error procesando archivo {file_path}: {e}")
            return False
    
    def test_module(self, module_type: ModuleType) -> bool:
        """Ejecuta pruebas de un m√≥dulo espec√≠fico"""
        try:
            if not self.select_module(module_type):
                return False
            
            return self.current_handler.test_module()
            
        except Exception as e:
            rpa_logger.error(f"Error probando m√≥dulo {module_type.value}: {e}")
            return False
    
    def get_module_status(self, module_type: ModuleType) -> Dict[str, Any]:
        """Obtiene el estado de un m√≥dulo"""
        try:
            if not self.select_module(module_type):
                return {"status": "error", "message": "No se pudo seleccionar el m√≥dulo"}
            
            module_info = self.modules[module_type]
            handler_info = self.current_handler.get_module_info()
            
            return {
                "status": "ready",
                "module_info": module_info,
                "handler_info": handler_info,
                "config_file": module_info.config_file,
                "test_scripts": module_info.test_scripts
            }
            
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def validate_data(self, data: Dict[str, Any], module_type: ModuleType) -> bool:
        """Valida datos para un m√≥dulo espec√≠fico"""
        try:
            if not self.select_module(module_type):
                return False
            
            # Validar seg√∫n el tipo de m√≥dulo
            if module_type == ModuleType.SALES_ORDER:
                return self.current_handler._validate_sales_data(data)
            elif module_type == ModuleType.PRODUCTION_ORDER:
                return self.current_handler._validate_production_data(data)
            else:
                rpa_logger.error(f"Tipo de m√≥dulo no soportado para validaci√≥n: {module_type.value}")
                return False
                
        except Exception as e:
            rpa_logger.error(f"Error validando datos: {e}")
            return False
    
    def get_supported_fields(self, module_type: ModuleType) -> List[str]:
        """Obtiene los campos soportados por un m√≥dulo"""
        try:
            if not self.select_module(module_type):
                return []
            
            handler_info = self.current_handler.get_module_info()
            return handler_info.get("supported_fields", [])
            
        except Exception as e:
            rpa_logger.error(f"Error obteniendo campos soportados: {e}")
            return []
    
    def get_processing_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de procesamiento"""
        return {
            "current_module": self.current_module.value if self.current_module else None,
            "available_modules": [m.value for m in self.get_available_modules()],
            "total_modules": len(self.modules)
        }


def main():
    """Funci√≥n principal - Interfaz de l√≠nea de comandos"""
    print("üöÄ INTERFAZ UNIFICADA RPA")
    print("=" * 50)
    
    interface = RPAUnifiedInterface()
    
    while True:
        print("\nüìã MEN√ö PRINCIPAL")
        print("1. Listar m√≥dulos disponibles")
        print("2. Ver estado de un m√≥dulo")
        print("3. Seleccionar m√≥dulo")
        print("4. Procesar archivo JSON")
        print("5. Ejecutar prueba")
        print("6. Optimizar m√≥dulo")
        print("7. Estado del sistema")
        print("8. Salir")
        
        try:
            choice = input("\nüéØ Selecciona una opci√≥n (1-8): ").strip()
            
            if choice == "1":
                print("\nüì¶ M√ìDULOS DISPONIBLES:")
                modules = interface.get_available_modules()
                for module_type in modules:
                    module_info = interface.get_module_info(module_type)
                    status_icon = "‚úÖ" if module_info.status == "ready" else "‚ö†Ô∏è"
                    print(f"{status_icon} {module_info.name} ({module_type.value})")
                    print(f"   {module_info.description}")
                    print(f"   Estado: {module_info.status}")
                    print()
            
            elif choice == "2":
                print("\nüîç VER ESTADO DE M√ìDULO:")
                print("1. √ìrdenes de Venta")
                print("2. √ìrdenes de Producci√≥n")
                
                module_choice = input("Selecciona m√≥dulo (1-2): ").strip()
                module_map = {
                    "1": ModuleType.SALES_ORDER,
                    "2": ModuleType.PRODUCTION_ORDER
                }
                
                if module_choice in module_map:
                    status = interface.get_module_status(module_map[module_choice])
                    print(f"\nüìä ESTADO DEL M√ìDULO:")
                    print(json.dumps(status, indent=2, ensure_ascii=False))
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            
            elif choice == "3":
                print("\nüéØ SELECCIONAR M√ìDULO:")
                print("1. √ìrdenes de Venta")
                print("2. √ìrdenes de Producci√≥n")
                
                module_choice = input("Selecciona m√≥dulo (1-2): ").strip()
                module_map = {
                    "1": ModuleType.SALES_ORDER,
                    "2": ModuleType.PRODUCTION_ORDER
                }
                
                if module_choice in module_map:
                    success = interface.select_module(module_map[module_choice])
                    if success:
                        print("‚úÖ M√≥dulo seleccionado exitosamente")
                    else:
                        print("‚ùå Error seleccionando m√≥dulo")
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            
            elif choice == "4":
                if interface.current_module is None:
                    print("‚ùå No hay m√≥dulo seleccionado")
                    continue
                
                file_path = input("üìÅ Ruta del archivo JSON: ").strip()
                module_type = interface.current_module
                
                result = interface.process_file(file_path, module_type)
                print(f"\nüìä RESULTADO:")
                print(json.dumps(result, indent=2, ensure_ascii=False))
            
            elif choice == "5":
                if interface.current_module is None:
                    print("‚ùå No hay m√≥dulo seleccionado")
                    continue
                
                print("\nüß™ TIPOS DE PRUEBA:")
                print("1. √ìrdenes de Venta")
                print("2. √ìrdenes de Producci√≥n")
                
                test_choice = input("Selecciona tipo de prueba (1-2): ").strip()
                test_map = {"1": ModuleType.SALES_ORDER, "2": ModuleType.PRODUCTION_ORDER}
                
                if test_choice in test_map:
                    print("üöÄ Ejecutando prueba...")
                    result = interface.test_module(test_map[test_choice])
                    print(f"\nüìä RESULTADO:")
                    print(json.dumps(result, indent=2, ensure_ascii=False))
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            
            elif choice == "6":
                print("\n‚ö° OPTIMIZAR M√ìDULO:")
                print("1. √ìrdenes de Venta")
                print("2. √ìrdenes de Producci√≥n")
                
                module_choice = input("Selecciona m√≥dulo (1-2): ").strip()
                module_map = {
                    "1": ModuleType.SALES_ORDER,
                    "2": ModuleType.PRODUCTION_ORDER
                }
                
                if module_choice in module_map:
                    print("üîß Optimizando m√≥dulo...")
                    # The original optimize_module method was removed from the new_code,
                    # so this part of the menu will now be empty or require a new implementation.
                    # For now, we'll just print a placeholder message.
                    print("Optimizaci√≥n no disponible en esta versi√≥n.")
                    # result = interface.optimize_module(module_map[module_choice]) # This line is removed
                    # print(f"\nüìä RESULTADO:")
                    # print(json.dumps(result, indent=2, ensure_ascii=False))
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            
            elif choice == "7":
                status = interface.get_processing_stats()
                print(f"\nüìä ESTADO DEL SISTEMA:")
                print(json.dumps(status, indent=2, ensure_ascii=False))
            
            elif choice == "8":
                print("üëã ¬°Hasta luego!")
                break
            
            else:
                print("‚ùå Opci√≥n inv√°lida")
                
        except KeyboardInterrupt:
            print("\nüëã ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    main()
