#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas en la navegaci√≥n a "Orden de Venta" en SAP
"""

import time
import sys
import os
import cv2
import numpy as np
import pyautogui

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from rpa.vision.main import Vision
from rpa.screen_detector import ScreenDetector
from rpa.simple_logger import rpa_logger

def diagnose_sap_navigation():
    """Diagnostica la navegaci√≥n a Orden de Venta en SAP"""
    
    print("=== DIAGN√ìSTICO DE NAVEGACI√ìN A ORDEN DE VENTA EN SAP ===")
    print("Este script identificar√° exactamente d√≥nde falla la navegaci√≥n")
    print()
    
    # Crear instancias
    vision = Vision()
    detector = ScreenDetector()
    
    # Paso 1: Verificar estado actual
    print("üîç PASO 1: Verificando estado actual de la pantalla...")
    result = detector.detect_current_screen(save_screenshot=True)
    print(f"   Estado detectado: {result.state.value}")
    print(f"   Confianza: {result.confidence:.3f}")
    
    if result.state.value != "sap_desktop":
        print("‚ùå No estamos en SAP Desktop. Por favor, navega a SAP primero.")
        return False
    
    print("‚úÖ Estamos en SAP Desktop")
    print()
    
    # Paso 2: Buscar bot√≥n de m√≥dulos
    print("üîç PASO 2: Buscando bot√≥n de m√≥dulos...")
    modulos_coords = vision.get_modulos_menu_coordinates()
    
    if modulos_coords:
        print(f"‚úÖ Bot√≥n de m√≥dulos encontrado en: {modulos_coords}")
        
        # Tomar screenshot para verificar
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        # Guardar screenshot con marca en el bot√≥n
        marked_screenshot = screenshot_cv.copy()
        cv2.circle(marked_screenshot, modulos_coords, 10, (0, 255, 0), 2)
        cv2.imwrite("./debug_screenshots/modulos_button_found.png", marked_screenshot)
        print("   üì∏ Screenshot guardado: debug_screenshots/modulos_button_found.png")
        
    else:
        print("‚ùå Bot√≥n de m√≥dulos NO encontrado")
        print("   Posibles causas:")
        print("   - La imagen de referencia no coincide con la pantalla actual")
        print("   - El bot√≥n est√° en una posici√≥n diferente")
        print("   - La resoluci√≥n de pantalla es diferente")
        return False
    
    print()
    
    # Paso 3: Simular clic en m√≥dulos
    print("üîç PASO 3: Simulando clic en m√≥dulos...")
    print("   ‚ö†Ô∏è  NO se har√° clic real, solo se mostrar√° d√≥nde se har√≠a")
    print(f"   Coordenadas donde se har√≠a clic: {modulos_coords}")
    
    # Esperar confirmaci√≥n del usuario
    input("   Presiona ENTER para continuar con el siguiente paso...")
    print()
    
    # Paso 4: Buscar men√∫ de ventas
    print("üîç PASO 4: Buscando men√∫ de ventas...")
    ventas_coords = vision.get_ventas_menu_coordinates()
    
    if ventas_coords:
        print(f"‚úÖ Men√∫ de ventas encontrado en: {ventas_coords}")
        
        # Tomar screenshot para verificar
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        # Guardar screenshot con marca en el men√∫
        marked_screenshot = screenshot_cv.copy()
        cv2.circle(marked_screenshot, ventas_coords, 10, (0, 255, 0), 2)
        cv2.imwrite("./debug_screenshots/ventas_menu_found.png", marked_screenshot)
        print("   üì∏ Screenshot guardado: debug_screenshots/ventas_menu_found.png")
        
    else:
        print("‚ùå Men√∫ de ventas NO encontrado")
        print("   Posibles causas:")
        print("   - El men√∫ de m√≥dulos no se abri√≥ correctamente")
        print("   - La imagen de referencia no coincide")
        print("   - El men√∫ est√° en una posici√≥n diferente")
        return False
    
    print()
    
    # Paso 5: Buscar bot√≥n de orden de venta
    print("üîç PASO 5: Buscando bot√≥n de orden de venta...")
    orden_coords = vision.get_ventas_order_coordinates()
    
    if orden_coords:
        print(f"‚úÖ Bot√≥n de orden de venta encontrado en: {orden_coords}")
        
        # Tomar screenshot para verificar
        screenshot = pyautogui.screenshot()
        screenshot_np = np.array(screenshot)
        screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        # Guardar screenshot con marca en el bot√≥n
        marked_screenshot = screenshot_cv.copy()
        cv2.circle(marked_screenshot, orden_coords, 10, (0, 255, 0), 2)
        cv2.imwrite("./debug_screenshots/orden_venta_found.png", marked_screenshot)
        print("   üì∏ Screenshot guardado: debug_screenshots/orden_venta_found.png")
        
    else:
        print("‚ùå Bot√≥n de orden de venta NO encontrado")
        print("   Posibles causas:")
        print("   - El men√∫ de ventas no se abri√≥ correctamente")
        print("   - La imagen de referencia no coincide")
        print("   - El bot√≥n tiene un nombre diferente")
        print("   - El bot√≥n est√° en una posici√≥n diferente")
        
        # Mostrar informaci√≥n de debug
        print("\nüîß INFORMACI√ìN DE DEBUG:")
        print("   - Imagen de referencia: sap_ventas_order_button.png")
        print("   - Tama√±o de imagen: ", vision.sap_ventas_order_button_image.shape if vision.sap_ventas_order_button_image is not None else "No cargada")
        
        # Intentar b√∫squeda con umbral m√°s bajo
        print("\nüîç Intentando b√∫squeda con umbral m√°s bajo...")
        try:
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            result = cv2.matchTemplate(screenshot_cv, vision.sap_ventas_order_button_image, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            print(f"   - Confianza m√°xima encontrada: {max_val:.3f}")
            print(f"   - Posici√≥n del mejor match: {max_loc}")
            
            if max_val > 0.3:  # Umbral muy bajo para debug
                w = vision.sap_ventas_order_button_image.shape[1]
                h = vision.sap_ventas_order_button_image.shape[0]
                center = (max_loc[0] + w//2, max_loc[1] + h//2)
                print(f"   - Centro del mejor match: {center}")
                
                # Guardar screenshot con el mejor match
                marked_screenshot = screenshot_cv.copy()
                cv2.rectangle(marked_screenshot, max_loc, (max_loc[0] + w, max_loc[1] + h), (0, 0, 255), 2)
                cv2.circle(marked_screenshot, center, 5, (0, 0, 255), -1)
                cv2.imwrite("./debug_screenshots/best_match_orden_venta.png", marked_screenshot)
                print("   üì∏ Screenshot del mejor match guardado: debug_screenshots/best_match_orden_venta.png")
        
        except Exception as e:
            print(f"   ‚ùå Error en b√∫squeda de debug: {e}")
        
        return False
    
    print()
    print("‚úÖ DIAGN√ìSTICO COMPLETADO")
    print("   Todos los elementos de navegaci√≥n fueron encontrados correctamente")
    print("   El problema podr√≠a estar en:")
    print("   - Los tiempos de espera entre clics")
    print("   - La secuencia de navegaci√≥n")
    print("   - La detecci√≥n de estado despu√©s de cada clic")
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando diagn√≥stico de navegaci√≥n SAP")
    print()
    
    # Crear directorio de debug si no existe
    os.makedirs("./debug_screenshots", exist_ok=True)
    
    success = diagnose_sap_navigation()
    
    print()
    if success:
        print("üéâ ¬°Diagn√≥stico completado exitosamente!")
        print("   Todos los elementos de navegaci√≥n est√°n funcionando")
    else:
        print("‚ö†Ô∏è  Se encontraron problemas en la navegaci√≥n")
        print("   Revisa los screenshots en debug_screenshots/ para m√°s detalles")
    
    print("\n" + "="*50)

if __name__ == "__main__":
    main()
